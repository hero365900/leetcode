#include <iostream>
#include <vector>
#include <queue>
#include <list>
#include <cstdlib>

#include "../util/aux_func.h"

using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

void in_traversal(TreeNode *root) {
  if (root == NULL) return;
  in_traversal(root->left);
  cout << root->val << ", ";
  in_traversal(root->right);
}

vector<vector<int> > levelOrderBottom(TreeNode *root) {
  vector<vector<int> > result;
  if (root == NULL) return result;
  list<vector<int> > tmp_result;
  tmp_result.push_front(vector<int>());
  TreeNode *cursor(NULL);
  queue<TreeNode*> q;
  q.push(root);
  q.push(NULL);
  while (!q.empty()) {
    cursor = q.front();
    q.pop();
    if (cursor == NULL) {
      if (q.empty()) break;
      tmp_result.push_front(vector<int>());
      q.push(NULL);
      continue;
    }
    tmp_result.front().push_back(cursor->val);
    if (cursor->left) q.push(cursor->left);
    if (cursor->right) q.push(cursor->right);
  }
  result.resize(tmp_result.size());
  copy(tmp_result.begin(), tmp_result.end(), result.begin());
  return result;
}

void split(const string &line, vector<string> &vec, const string &sep) {
  size_t pos = line.find(sep);
  if (string::npos == pos) {vec.push_back(line); return;}
  vec.push_back(line.substr(0, pos));
  size_t last_pos = 0;
  while (string::npos != pos) {
    last_pos = pos;
    pos = line.find(sep, pos + 1);
    if (string::npos != pos) { 
      vec.push_back(line.substr(last_pos + 1, pos - last_pos - 1));
    } else {
      vec.push_back(line.substr(last_pos + 1));
      break;
    }
  }
}

TreeNode* loadTree(const string &line) {
  vector<string> vals;
  split(line, vals, ",");
  //cout << "vals in loadTree : ";
  //print_vec(vals);
  if (0 == vals.size()) return NULL;
  queue<TreeNode*> q;
  TreeNode *root = new TreeNode(atoi(vals[0].c_str()));
  TreeNode *cursor(NULL), *tmp(NULL);
  q.push(root);
  int i = 1;
  while (!q.empty() && i < vals.size()) {
    cursor = q.front();
    q.pop();
    if (vals[i] != "#") {
      tmp = new TreeNode(atoi(vals[i].c_str()));
      q.push(tmp);
      cursor->left = tmp;
    }
    ++i;
    if (i >= vals.size()) break;
    if (vals[i] != "#") {
      tmp = new TreeNode(atoi(vals[i].c_str()));
      q.push(tmp);
      cursor->right = tmp;
    }
    ++i;
  }
  return root;
}

int main() {
  TreeNode *root(NULL);
  vector<vector<int> > r;
  //r = levelOrderBottom(root);
  //print_matrix(r);
  string line;
  while (cin >> line) {
    root = loadTree(line);
    cout << "tree :";
    in_traversal(root);
    cout << endl;
    cout << "result : " << endl;
    r = levelOrderBottom(root);
    print_matrix(r);
    cout << endl;
  }
  cout << endl;
  return 0;
}
