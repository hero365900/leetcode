#include <iostream>
using namespace std;

struct ListNode {
  int val;
  ListNode *next;
  ListNode(int x) : val(x), next(NULL) {}
};

void print(ListNode *head) {
  while (head) {
    cout << head->val << ", ";
    head = head->next;
  }
  return;
}

ListNode *reverseBetween(ListNode *head, int m, int n) {
  if (head == NULL) return NULL;
  if (m == n) return head;
  ListNode *prem(NULL), *p(head), *q(NULL), *r(NULL), *pm(NULL);
  int i = 0;
  for (i = 1; i != m; ++i) {
    prem = p;
    p = p->next;
    if (p == NULL) return NULL;
  }
  pm = p;
  q = p->next;
  if (q == NULL) return NULL;
  r = q->next;
  for (; i != n; ++i) {
    if (p == NULL || q == NULL) return NULL;
    q->next = p;
    p = q;
    //if (p == NULL) {cout << "p is NULL" << endl;}
    //else {cout << p->val << endl;}
    q = r;
    if (r) r = r->next;
  }
  if (prem) {
    prem->next = p;
  }
  pm->next = q;
  if (m == 1) return p;
  return head;
}

int main() {
  ListNode *head = new ListNode(1);
  head->next = new ListNode(2);
  head->next->next = new ListNode(3);
  head->next->next->next = new ListNode(4);
  head->next->next->next->next = new ListNode(5);
  print(head);
  cout << endl;
  head = reverseBetween(head, 2, 5);
  print(head);
  cout << endl;
  return 0;
}
