#include <iostream>
#include <vector>
#include <list>
#include <iterator>
using namespace std;

void radix_sort(vector<int>& data) {
  //ostream_iterator<int> output(cout, " ");
  int prebase(1), base(10), mod(0), cnt(0), last(0);
  vector<list<int> > buf(10);
  typedef list<int>::iterator LSTITR;
  bool canbreak = false;
  LSTITR litr;
  while (true) {
    canbreak = true;
    last = 0;
    for (int i = 0; i != data.size(); ++i) {
      if (last <= data[i]) {last = data[i];}
      else {canbreak = false;}
      mod = (data[i] % base) / prebase;
      buf[mod].push_back(data[i]);
    }
    if (canbreak) {
      return;
    }
    cnt = 0;
    for (int i = 0; i != buf.size(); ++i) {
      litr = buf[i].begin();
      while (litr != buf[i].end()) {
        //cout << *litr << " -> ";
        if (cnt > 0 && *litr == data[cnt - 1]) {
          ++litr; 
          continue;
        }
        data[cnt++] = *litr;
        ++litr;
      }
      //cout << endl;
      buf[i].clear();
    }
    //cout << "cnt = " << cnt << endl;
    if (data.size() > cnt)  {
      data.erase(data.begin() + cnt, data.end());
    }
    //cout << data.size() << endl;
    prebase = base;
    base *= 10;
    //copy(data.begin(), data.end(), output);
    //cout << endl;
  }
}

int sta(const vector<int>& data, int& endlen) {
  if (data.size() == 0) {endlen = 0; return 0;}
  if (data.size() == 1) {
    if (data[0] == 0) endlen = 1;
    else endlen = 0;
    return 1;
  }
  int cnt(1), maxcnt(0);
  int dup(0);
  endlen = 1;
  for (int i = 1; i != data.size(); ++i) {
    if (data[i] - data[i - 1] == 1) {
      ++cnt;
    } else {
      //cout << "data["<<i<<"] = " << data[i] << " cnt = " << cnt << endl;
      maxcnt = (maxcnt > cnt ? maxcnt : cnt);
      if (data[i - cnt] == 0) endlen = cnt;
      cnt = 1;
    }
  }
  if (data[data.size() - cnt] == 0) endlen = cnt;
  maxcnt = (maxcnt > cnt ? maxcnt : cnt);
  return maxcnt;
}

int solve(vector<int>& num) {
  int left_endlen(0), right_endlen(0), left_max(0), right_max(0);
  vector<int> left, right;
  for (int i = 0; i != num.size(); ++i) {
    if (num[i] >= 0) right.push_back(num[i]);
    if (num[i] <= 0) left.push_back(0 - num[i]);
  }
  //left_max = solve_part(left, left_endlen, false);
  //right_max = solve_part(right, right_endlen, true);
  //ostream_iterator<int> output(cout, " ");
  radix_sort(left);
  //copy(left.begin(), left.end(), output);
  //cout << endl;
  radix_sort(right);
  //copy(right.begin(), right.end(), output);
  //cout << endl;
  left_max = sta(left, left_endlen);
  //cout << "left_max = " << left_max << endl;
  //cout << "left_endlen = " << left_endlen << endl;
  right_max = sta(right, right_endlen);
  //cout << "right_max = " << right_max << endl;
  //cout << "right_endlen= " << right_endlen << endl;
  int maxcnt = (left_max > right_max ? left_max : right_max);
  int middle = left_endlen + right_endlen - 1;
  maxcnt = (middle > maxcnt ? middle : maxcnt);
  return maxcnt;
}
int main() {
  //int a[] = {100,4,2000,1,3,2,5};
  //int a[] = {2147483646,-2147483647, -2, -1, 0, 1, 2, 3, 2147483644,-2147483645,2147483645};
  //int a[] = {2147483646,0, 1, 2, 3, 2147483644,2147483645};
  //int a[] = {0};
  //int a[] = {1, 2, 0, 1};
  //int a[] = {1,-8,7,-2,-4,-4,6,3,-4,0,-7,-1,5,1,-9,-3};
  int a[] = {-9,-4,9,-7,0,7,3,-1,6,2,-2,8,-2,0,2,-7,-5,-2,6,-5,0,-8,8,1,0,6,8,-8,-1};
  vector<int> k((int*)a, (int*)a + 29);
  //radix_sort(k);
  cout << solve(k) << endl;
  /*int b[] = {1,2,3,4,5,6,7};
  vector<int> s((int*)b, (int*)b + 7);
  cout << s.size() << endl;
  s.erase(s.begin() + 3, s.end());
  cout << s.size() << endl;*/
  return 0;
}
