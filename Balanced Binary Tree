#include <iostream>
#include <queue>
using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

bool _isBalanced(TreeNode *root, int& height) {
  if (root == NULL || (root->left == NULL && root->right == NULL)) {
    if (root == NULL) height = 0;
    else height = 1;
    return true;
  }
  int left_height(0), right_height(0);
  bool balanced(true);
  balanced &= _isBalanced(root->left, left_height);
  balanced &= _isBalanced(root->right, right_height);
  balanced &= (((left_height - right_height) * (left_height - right_height)) <= 1);
  height = max(left_height, right_height) + 1;
  return balanced;
}

bool isBalanced(TreeNode *root) {
  if (root == NULL) return true;
  int height(0);
  return _isBalanced(root, height);
}


int main() {
  TreeNode *root = new TreeNode(5);
  root->left = new TreeNode(4);
  root->right= new TreeNode(8);
  root->left->left = new TreeNode(11);
  root->right->left= new TreeNode(13);
  root->right->right= new TreeNode(4);
  root->left->left->left = new TreeNode(7);
  root->left->left->right = new TreeNode(2);
  root->right->right->right = new TreeNode(1);
  root->right->right->left= new TreeNode(5);
  //root->left = NULL;
  //root->right = NULL;
  cout << isBalanced(root) << endl;
  return 0;
}
