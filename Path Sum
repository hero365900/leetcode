#include <iostream>
#include <cassert>
using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

void print(TreeNode *root) {
  TreeNode *cursor = root;
  while (cursor) {
    if (cursor->left) {
      cout << "Error" << endl;
      return;
    }
    cout << cursor->val << "->";
    cursor = cursor->right;
  }
  cout << endl;
}

bool hasPathSum(TreeNode *root, int sum) {
  if (root == NULL) return false;
  int remain = sum - root->val;
  if (root->left == NULL && root->right == NULL) {
    return (remain == 0);
  }
  bool result(false);
  if (root->left) result |= hasPathSum(root->left, remain);
  if (root->right) result |= hasPathSum(root->right, remain);
  return result;
}

int main() {
  TreeNode *root = new TreeNode(5);
  root->left = new TreeNode(4);
  root->right= new TreeNode(8);
  root->left->left = new TreeNode(11);
  root->right->left= new TreeNode(13);
  root->right->right= new TreeNode(4);
  root->left->left->left = new TreeNode(7);
  root->left->left->right = new TreeNode(2);
  root->right->right->right = new TreeNode(1);
  cout << hasPathSum(root, 20) << endl;
  return 0;
}
