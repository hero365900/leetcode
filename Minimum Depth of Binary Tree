#include <iostream>
#include <queue>
using namespace std;

struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

int minDepth(TreeNode *root) {
  if (root == NULL) return 0;
  int depth(0);
  queue<TreeNode*> q;
  q.push(root);
  q.push(NULL);
  TreeNode *cursor(NULL);
  while (!q.empty()) {
    cursor = q.front();
    q.pop();
    if (cursor == NULL) {
      ++depth;
      q.push(NULL);
      continue;
    }
    if (cursor->left == NULL && cursor->right == NULL) return depth + 1;
    if (cursor->left) q.push(cursor->left);
    if (cursor->right) q.push(cursor->right);
  }
}

int main() {
  TreeNode *root = new TreeNode(5);
  root->left = new TreeNode(4);
  root->right= new TreeNode(8);
  root->left->left = new TreeNode(11);
  //root->right->left= new TreeNode(13);
  //root->right->right= new TreeNode(4);
  root->left->left->left = new TreeNode(7);
  root->left->left->right = new TreeNode(2);
  //root->right->right->right = new TreeNode(1);
  //root->right->right->left= new TreeNode(5);
  root->left = NULL;
  root->right = NULL;
  cout << minDepth(NULL) << endl;
  return 0;
}
