#include <iostream>
#include <algorithm>

#include "../util/aux_func.h"

using namespace std;

vector<vector<int> > subsetsWithDup(vector<int> &S) {
  int layer = 0;
  vector<int> indices(S.size(), 0), tmp(S.size(), 0);
  vector<vector<int> > result;
  result.push_back(vector<int>());
  if (S.size() == 0) return result;
  sort(S.begin(), S.end());
  for (int sz = 1; sz <= S.size(); ++sz) {
    for (int i = 0; i != sz; ++i) {indices[i] = i; tmp[i] = S[i];}
    result.push_back(vector<int>(tmp.begin(), tmp.begin() + sz));
    ++indices[sz - 1];
    while (true) {
      for (; indices[sz - 1] != S.size(); ++indices[sz - 1]) {
        if (S[indices[sz - 1]] == tmp[sz - 1]) continue;
        tmp[sz - 1] = S[indices[sz - 1]];
        result.push_back(vector<int>(tmp.begin(), tmp.begin() + sz));
      }
      layer = sz - 1;
      while (layer > 0 && indices[layer] > S.size() - sz + layer) {
        --layer;
        ++indices[layer];
        while (indices[layer] < S.size() && S[indices[layer]] == S[indices[layer] - 1]) {
          ++indices[layer];
        }
      }
      if (layer == 0 && indices[layer] > S.size() - sz + layer) break; // current sz has finished need ++sz
      for (int j = layer; j != sz - 1; ++j) {
        indices[j + 1] = indices[j] + 1;
      }
      while (layer != sz) {
        tmp[layer] = S[indices[layer]];
        ++layer;
      }
      result.push_back(vector<int>(tmp.begin(), tmp.begin() + sz));
    }  // end of while (true)
  }  // end of for ++sz
}

int main() {
  int a[] = {1,1,1,2,2};
  vector<int> t((int*)a, (int*)a + 1);
  vector<vector<int> > r = subsetsWithDup(t);
  print_matrix(r);
  cout << endl;
  return 0;
}
